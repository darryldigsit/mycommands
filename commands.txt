This is a quick reference guide organized by Chapter and Section for most of the commands I included in my book (Be The Family Computer Hero). Along with the Windows commands, you will also see a Linux and MacOS equivalent for the non-Microsoft audience out there. These are best effort - I've tried to make these the most compatible with many Linux versions. Mileage may vary. 

CHAPTER 3   SECTION: INTRO  - How to open a command prompt as Admin
General Command Line Launch:
Windows: Press ⊞+R, type cmd, press [Ctrl + Shift + Enter]
Linux: Use Ctrl+Alt+T to open a terminal.
MacOS: Use Cmd+Space, type Terminal, press Enter.
________________________________________
CHAPTER 3   SECTION:  TOP ANTI-MALWARE - Turn On Windows Malware Protection

Windows:   powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "Set-MpPreference -DisableRealtimeMonitoring $false; Set-MpPreference -DisableIOAVProtection $false; Set-MpPreference -PUAProtection enable; Set-MpPreference -ScanParameters 2; Set-MpPreference -ScanScheduleDay 1; Set-MpPreference -ScanScheduleOffset 0"

      Quick AV Scan:  powershell.exe -c "Start-MpScan -ScanType QuickScan"
   	Full AV Scan:  powershell.exe -c "Start-MpScan -ScanType FullScan"

Linux:  Use built-in options in ClamAV or install third-party security tools. This procedure is greatly dependent on the Linux version that you have, so I'm going to recommend that you look this up using your favorite AI platform. For Ubuntu, this will get AV installed and scheduled:
sudo apt install clamav-daemon
sudo systemctl enable --now clamav-daemon clamav-freshclam
sudo bash -c '(crontab -l 2>/dev/null; echo "0 2 * * * /usr/bin/clamscan -r /home >>  /var/log/clamav/scan.log") | crontab -'

MacOS: Use built-in XProtect (no CLI customization), or install third-party tools. XProtect is on and running by default but you can check using:
To check Status: sudo xprotect status
To update: sudo xprotect update
Discrepancy: Defender is Windows-specific. Linux uses ClamAV and MacOS uses XProtect.
________________________________________
CHAPTER 3   SECTION: DNS PROTECTION - How to Check Your Current DNS
Functionality: Lists all network configuration and DNS details.

Windows:   ipconfig /all

Linux: nmcli device show  

MacOS:   scutil --dns  (or)  cat /etc/resolv.conf

Note: Linux/Mac commands may show only DNS settings, not all the adapter details unlike Windows’ ipconfig /all.
________________________________________
CHAPTER 3   SECTION: DNS PROTECTION - Secure DNS with OpenDNS
Functionality: Sets primary and secondary DNS servers for the interface named “Wi-Fi”.

Windows:   FOR /F "tokens=3,*" %A IN ('netsh interface show interface ^| find "Connected"') DO (netsh interface ip set dns name="%B" static 208.67.222.222 & netsh interface ip add dns name="%B" 208.67.220.220 index=2) & ipconfig /all

Linux: sudo nano /etc/network/interfaces OR sudo nano /etc/netplan/*.yaml 
       Depending on Linux version, or try this one-liner:
       nmcli connection modify "$(nmcli -t -f NAME,DEVICE connection show --active | head -n1 | cut -d: -f1)" Ipv4.dns "208.67.222.222 208.67.220.220" ipv4.Ignore-auto-dns yes && nmcli connection up "$(nmcli -t -f NAME,DEVICE Connection show --active |  head -n1 | cut -d: -f1)"

MacOS:  networksetup -setdnsservers Wi-Fi 208.67.222.222 208.67.220.220

Discrepancy: Interface names may differ. You must know the exact name or index for the network device on all operating systems.
________________________________________
CHAPTER 3   SECTION:  DNS PROTECTION -  Show the Connected Interfaces Names

Windows:   netsh interface show interface

Linux: ip -o link show up | awk -F': ' '{print $2}'

MacOS: networksetup -listallnetworkservices

Note: The commands differ in output style and content but all show network device names/IDs.
________________________________________
CHAPTER 3   SECTION:  PATCHING SYSTEMS - Turn On Windows Update Service 

Windows: sc config wuauserv start= auto & net start wuauserv & sc query wuauserv

Linux:  sudo systemctl enable apt-daily-upgrade.timer && sudo systemctl start apt-daily-upgrade.timer && sudo dpkg-reconfigure unattended-upgrades
(This run persistent daily updates for Ubuntu. Service names vary for other Linux versions).

MacOS: sudo launchctl load -w /Library/LaunchDaemons/com.apple.softwareupdate.plist && sudo launchctl start com.apple.softwareupdate

Discrepancy: Windows specifically checks the update service status, while on Debian/MacOS, package updates are checked differently (there's no analog for wuauserv).
________________________________________
CHAPTER 3   SECTION:  PATCHING SYSTEMS  -  Update All Applications Manually

Windows: winget upgrade --all

Linux:  sudo apt update && sudo apt upgrade -y

MacOS:   brew update && brew upgrade

Note: Requires Homebrew for MacOS, which is not included by default; winget is Windows 10+/11 only.
________________________________________
CHAPTER 3   SECTION:  PATCHING SYSTEMS  - Schedule Weekly Application Updates

Windows:   powershell -Command "Register-ScheduledTask -TaskName 'WingetUpdates' -Action (New-ScheduledTaskAction -Execute 'cmd.exe' -Argument '/k winget upgrade --all & pause') -Trigger (New-ScheduledTaskTrigger -Weekly -DaysOfWeek Wednesday -At 9:00AM) -Settings (New-ScheduledTaskSettingsSet -StartWhenAvailable) -Force"

Linux:  sudo bash -c '(crontab -l 2>/dev/null; echo "0 9 * * 3 root apt update && apt upgrade -y") | crontab -'

MacOS:  sudo bash -c '(crontab -l 2>/dev/null; echo "0 9 * * 3 root apt update && apt upgrade -y") | crontab -'

Discrepancy: The Windows command creates a system-scheduled task; on Linux/Mac, cron or launchd is used instead.
________________________________________
CHAPTER 3   SECTION:  PATCHING SYSTEMS  - Firmware Updates (locate system Info)

Windows:  systeminfo

Linux: sudo dmidecode -t baseboard

MacOS:  system_profiler SPHardwareDataType
________________________________________
CHAPTER 3   SECTION:  BACKUPS  - Check if Shadow Copies are running

Windows: vssadmin list shadowstorage

Linux: No native “shadow copy,” but for snapshots: sudo lvs
For LVM: lvs
Timeshift (not default):  sudo timeshift --list

MacOS: Use Time Machine (GUI), or for APFS snapshots: tmutil listlocalsnapshots /
Discrepancy: Underlying technologies for snapshots vary significantly; Windows uses VSS, while Linux might use LVM/Btrfs/Timeshift, Mac uses Time Machine or APFS snapshots.
________________________________________
CHAPTER 3   SECTION:  BACKUPS - Troubleshooting (Turn on VSSAdmin)

Windows: wmic.exe /Namespace:\\root\default Path SystemRestore Call Enable "C:"

Linux: sudo apt update && sudo apt install -y timeshift

MacOS: Time Machine setup via System Preferences.

Note: No direct CLI for enabling Time Machine or Timeshift snapshots via one command.
________________________________________
CHAPTER 3   SECTION:  BACKUPS - Troubleshooting (Install WMI)

Windows:  DISM /Online /Cleanup-Image /RestoreHealth /Source:wim:D:\\sources\\install.wim:1 /LimitAccess 

Linux:      (No direct equivalent needed.)

MacOS: diskutil repairDisk <disk>
Or for software, reinstall via App Store or Terminal.

Discrepancy: DISM is unique to Windows for servicing Windows images.
________________________________________
CHAPTER 3   SECTION:  BACKUPS - Creating Manual System Restore Point

Windows:  powershell.exe -ExecutionPolicy Bypass -Command "Checkpoint-Computer -Description 'Restore Point (Automatic)' -RestorePointType MODIFY_SETTINGS"

Linux: No direct equivalent; create Timeshift snapshot:
sudo timeshift --create --comments "Manual Restore Point"

MacOS: No CLI for Time Machine snapshot creation; can be done via GUI or tmutil for APFS:  sudo tmutil snapshot

Discrepancy: Underlying infrastructure differs; Timeshift or APFS-based, are not built into classic UNIX.
________________________________________
CHAPTER 3   SECTION:  BACKUPS -  Schedule a Full System Backup

Windows:  powershell -Command "Enable-ComputerRestore -Drive 'C:\'; vssadmin Resize ShadowStorage /For=C: /On=C: /MaxSize=2%"

Linux:  sudo bash -c '(crontab -l 2>/dev/null; echo "0 8 * * * root timeshift --create --comments 'DailyFullBackup'") | crontab -'

MacOS:  Time Machine backups typically auto-run, but for scheduled CLI tasks: tmutil startbackup --auto

Discrepancy: Backup tooling is OS-specific; wbAdmin is Windows-only.
________________________________________
CHAPTER 3   SECTION:  FIREWALL - Turn On and Secure OS Firewall

Windows:   netsh advfirewall set allprofiles state on & netsh advfirewall set publicprofile firewallpolicy blockinbound,allowoutbound & netsh advfirewall show publicprofile

Linux:  sudo sh -c 'ufw enable && ufw default deny incoming && ufw default allow outgoing && ufw status verbose'

MacOS:  sudo sh -c '/usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on && /usr/libexec/ApplicationFirewall/socketfilterfw --setblockall on && /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate'

Discrepancy: All can set firewall defaults, but the commands and feature set differ.
________________________________________
CHAPTER 4  SECTION:  TO PROXY OR NOT TO PROXY - determine resources

Windows:   powershell -NoProfile -Command "$os=Get-CimInstance Win32_OperatingSystem; $memGB=[math]::Round($os.FreePhysicalMemory/1024/1024); $disk=(Get-CimInstance Win32_LogicalDisk | Where-Object { $_.DeviceID -eq 'C:' }); $freeGB=[math]::Round($disk.FreeSpace/1GB,2); Write-Output ('Free RAM: {0} GB; Free C: space: {1} GB' -f $memGB,$freeGB)"

Linux/MacOS:  echo "Memory:" && free -h 2>/dev/null || vm_stat && echo "Disk Space:" && df -h
________________________________________
CHAPTER 4  SECTION:  WHAT ABOUT VULNERABILITIES  - Install Nmap 

Windows:  powershell -Command "Invoke-WebRequest https://nmap.org/dist/nmap-7.94-setup.exe -OutFile $env:USERPROFILE\Downloads\nmap-setup.exe -ErrorAction Stop; Start-Process -Wait $env:USERPROFILE\Downloads\nmap-setup.exe"

Linux:  sudo apt-get install nmap && sudo apt upgrade nmap

MacOS: sudo apt-get install nmap && sudo apt upgrade nmap
________________________________________
CHAPTER 4  SECTION: WHAT ABOUT VULNERABILITIES  - Install Vulnerability Data

Windows: (Run the following three commands)
powershell -Command "Invoke-WebRequest -Uri https://github.com/scipag/vulscan/archive/refs/heads/master.zip -OutFile $env:TEMP\vulscan.zip"
powershell -Command "Expand-Archive -Path $env:TEMP\vulscan.zip -DestinationPath $env:TEMP\vulscan -Force"
xcopy /E /Y "%TEMP%\vulscan\vulscan-master\*" "C:\Program Files (x86)\Nmap\scripts\"

Linux\MacOS:  (This is all one command)
[ -d /usr/share/nmap/scripts/nmap-vulners/.git ] && sudo git -C /usr/share/nmap/scripts/nmap-vulners pull || sudo git clone https://github.com/vulnersCom/nmap-vulners.git /usr/share/nmap/scripts/nmap-vulners && [ -d /usr/share/nmap/scripts/vulscan/.git ] && sudo git -C /usr/share/nmap/scripts/vulscan pull || sudo git clone https://github.com/scipag/vulscan /usr/share/nmap/scripts/vulscan && sudo chmod +x /usr/share/nmap/scripts/vulscan/update.sh && sudo /usr/share/nmap/scripts/vulscan/update.sh
________________________________________
CHAPTER 4 SECTION: WHAT ABOUT VULNERABILITIES -  Example Scanning Commands

Windows:  This command automatically scans your full local IP range for vulnerabilities
 powershell -Command "$ip = ((Get-NetIPConfiguration | Where-Object {$_.IPv4DefaultGateway -ne $null}).IPv4Address | Select-Object -First 1).IPAddress; & \"C:\Program Files (x86)\Nmap\nmap.exe\" -sV -v --script=vulscan.nse \"$ip/24\""

Linux/MacOS:   nmap -sV -v --script vulscan/vulscan.nse 192.168.1.0/24

Combined Vuln + vulscan:  nmap -sV --script nmap-vulners/,vulscan/ 192.168.1.0/24
Filter by CVSS score: nmap -sV --script vuln --script-args mincvss=7.0 192.168.1.1
________________________________________
BONUS COMMANDS:  SHOW ALL SSIDS AND PASSWORDS 

Windows: powershell.exe -Command "(netsh wlan show profiles) | Select-String ':(.+)$' | ForEach-Object { $name = $_.Matches.Groups[1].Value.Trim(); (netsh wlan show profile name=\"$name\" key=clear) | Select-String 'Key Content\s+:\s+(.+)$' | ForEach-Object { $pass = $_.Matches.Groups[1].Value.Trim(); [PSCustomObject]@{ SSID = $name; Password = $pass } } } | Format-Table -AutoSize"

Linux:  for ssid in $(nmcli -t -f NAME connection show); do echo "SSID: $ssid"; nmcli connection show "$ssid" | grep -i 802-11-wireless-security.psk; done

MacOS: security find-generic-password -wa "SSID_NAME"
________________________________________
BONUS COMMANDS:  KITCHEN SINK (Load It All!) 
Windows:  This command downloads and installs all of the applicable chapter (3) improvements.
 powershell.exe -Command "Invoke-WebRequest -Uri https://raw.githubusercontent.com/darryldigsit/mycommands/main/Kitchen_Sink.bat -OutFile Kitchen_Sink.bat; cmd /c Kitchen_Sink.bat" 
